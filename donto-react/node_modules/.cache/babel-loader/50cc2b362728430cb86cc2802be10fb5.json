{"ast":null,"code":"import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\r\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\r\n * ```typescript\r\n * let writer = new StreamWriter();\r\n * writer.write('Hello World');\r\n * writer.save('Sample.txt');\r\n * writer.dispose();\r\n * ```\r\n */\nvar StreamWriter = /** @class */function () {\n  /**\r\n   * Initializes a new instance of the StreamWriter class by using the specified encoding.\r\n   * @param  {Encoding} encoding?- The character encoding to use.\r\n   */\n  function StreamWriter(encoding) {\n    this.bufferBlob = new Blob(['']);\n    this.bufferText = '';\n    this.init(encoding);\n    Save.isMicrosoftBrowser = !!navigator.msSaveBlob;\n  }\n  Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n    /**\r\n     * Gets the content written to the StreamWriter as Blob.\r\n     * @returns Blob\r\n     */\n    get: function () {\n      this.flush();\n      return this.bufferBlob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n    /**\r\n     * Gets the encoding.\r\n     * @returns Encoding\r\n     */\n    get: function () {\n      return this.enc;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  StreamWriter.prototype.init = function (encoding) {\n    if (encoding === null || encoding === undefined) {\n      this.enc = new Encoding(false);\n      this.enc.type = 'Utf8';\n    } else {\n      this.enc = encoding;\n      this.setBomByte();\n    }\n  };\n  /**\r\n   * Private method to set Byte Order Mark(BOM) value based on EncodingType\r\n   */\n  StreamWriter.prototype.setBomByte = function () {\n    if (this.encoding.includeBom) {\n      switch (this.encoding.type) {\n        case 'Unicode':\n          var arrayUnicode = new ArrayBuffer(2);\n          var uint8 = new Uint8Array(arrayUnicode);\n          uint8[0] = 255;\n          uint8[1] = 254;\n          this.bufferBlob = new Blob([arrayUnicode]);\n          break;\n        case 'Utf8':\n          var arrayUtf8 = new ArrayBuffer(3);\n          var utf8 = new Uint8Array(arrayUtf8);\n          utf8[0] = 239;\n          utf8[1] = 187;\n          utf8[2] = 191;\n          this.bufferBlob = new Blob([arrayUtf8]);\n          break;\n        default:\n          this.bufferBlob = new Blob(['']);\n          break;\n      }\n    }\n  };\n  /**\r\n   * Saves the file with specified name and sends the file to client browser\r\n   * @param  {string} fileName - The file name to save\r\n   * @returns {void}\r\n   */\n  StreamWriter.prototype.save = function (fileName) {\n    if (this.bufferText !== '') {\n      this.flush();\n    }\n    Save.save(fileName, this.buffer);\n  };\n  /**\r\n   * Writes the specified string.\r\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\r\n   * @returns {void}\r\n   */\n  StreamWriter.prototype.write = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n    validateNullOrUndefined(value, 'string');\n    this.bufferText += value;\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n  StreamWriter.prototype.flush = function () {\n    if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n      return;\n    }\n    var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n    this.bufferText = '';\n    this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n  };\n  /**\r\n   * Writes the specified string followed by a line terminator\r\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written\r\n   * @returns {void}\r\n   */\n  StreamWriter.prototype.writeLine = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n    validateNullOrUndefined(value, 'string');\n    this.bufferText = this.bufferText + value + '\\r\\n';\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n  /**\r\n   * Releases the resources used by the StreamWriter\r\n   * @returns {void}\r\n   */\n  StreamWriter.prototype.destroy = function () {\n    this.bufferBlob = undefined;\n    this.bufferText = undefined;\n    if (this.enc instanceof Encoding) {\n      this.enc.destroy();\n    }\n    this.enc = undefined;\n  };\n  return StreamWriter;\n}();\nexport { StreamWriter };","map":{"version":3,"names":["Encoding","validateNullOrUndefined","Save","StreamWriter","encoding","bufferBlob","Blob","bufferText","init","isMicrosoftBrowser","navigator","msSaveBlob","Object","defineProperty","prototype","get","flush","enumerable","configurable","enc","undefined","type","setBomByte","includeBom","arrayUnicode","ArrayBuffer","uint8","Uint8Array","arrayUtf8","utf8","save","fileName","buffer","write","value","Error","length","bufferArray","getBytes","writeLine","destroy"],"sources":["C:/Users/User/Desktop/ClinicaDentalVersionFinal/Proyecto-Clinica-Dental/donto-react/node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js"],"sourcesContent":["import { Encoding, validateNullOrUndefined } from './encoding';\r\nimport { Save } from './save';\r\n/**\r\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\r\n * ```typescript\r\n * let writer = new StreamWriter();\r\n * writer.write('Hello World');\r\n * writer.save('Sample.txt');\r\n * writer.dispose();\r\n * ```\r\n */\r\nvar StreamWriter = /** @class */ (function () {\r\n    /**\r\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\r\n     * @param  {Encoding} encoding?- The character encoding to use.\r\n     */\r\n    function StreamWriter(encoding) {\r\n        this.bufferBlob = new Blob(['']);\r\n        this.bufferText = '';\r\n        this.init(encoding);\r\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\r\n    }\r\n    Object.defineProperty(StreamWriter.prototype, \"buffer\", {\r\n        /**\r\n         * Gets the content written to the StreamWriter as Blob.\r\n         * @returns Blob\r\n         */\r\n        get: function () {\r\n            this.flush();\r\n            return this.bufferBlob;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StreamWriter.prototype, \"encoding\", {\r\n        /**\r\n         * Gets the encoding.\r\n         * @returns Encoding\r\n         */\r\n        get: function () {\r\n            return this.enc;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    StreamWriter.prototype.init = function (encoding) {\r\n        if (encoding === null || encoding === undefined) {\r\n            this.enc = new Encoding(false);\r\n            this.enc.type = 'Utf8';\r\n        }\r\n        else {\r\n            this.enc = encoding;\r\n            this.setBomByte();\r\n        }\r\n    };\r\n    /**\r\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\r\n     */\r\n    StreamWriter.prototype.setBomByte = function () {\r\n        if (this.encoding.includeBom) {\r\n            switch (this.encoding.type) {\r\n                case 'Unicode':\r\n                    var arrayUnicode = new ArrayBuffer(2);\r\n                    var uint8 = new Uint8Array(arrayUnicode);\r\n                    uint8[0] = 255;\r\n                    uint8[1] = 254;\r\n                    this.bufferBlob = new Blob([arrayUnicode]);\r\n                    break;\r\n                case 'Utf8':\r\n                    var arrayUtf8 = new ArrayBuffer(3);\r\n                    var utf8 = new Uint8Array(arrayUtf8);\r\n                    utf8[0] = 239;\r\n                    utf8[1] = 187;\r\n                    utf8[2] = 191;\r\n                    this.bufferBlob = new Blob([arrayUtf8]);\r\n                    break;\r\n                default:\r\n                    this.bufferBlob = new Blob(['']);\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Saves the file with specified name and sends the file to client browser\r\n     * @param  {string} fileName - The file name to save\r\n     * @returns {void}\r\n     */\r\n    StreamWriter.prototype.save = function (fileName) {\r\n        if (this.bufferText !== '') {\r\n            this.flush();\r\n        }\r\n        Save.save(fileName, this.buffer);\r\n    };\r\n    /**\r\n     * Writes the specified string.\r\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\r\n     * @returns {void}\r\n     */\r\n    StreamWriter.prototype.write = function (value) {\r\n        if (this.encoding === undefined) {\r\n            throw new Error('Object Disposed Exception: current writer is disposed');\r\n        }\r\n        validateNullOrUndefined(value, 'string');\r\n        this.bufferText += value;\r\n        if (this.bufferText.length >= 10240) {\r\n            this.flush();\r\n        }\r\n    };\r\n    StreamWriter.prototype.flush = function () {\r\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\r\n            return;\r\n        }\r\n        var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\r\n        this.bufferText = '';\r\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\r\n    };\r\n    /**\r\n     * Writes the specified string followed by a line terminator\r\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\r\n     * @returns {void}\r\n     */\r\n    StreamWriter.prototype.writeLine = function (value) {\r\n        if (this.encoding === undefined) {\r\n            throw new Error('Object Disposed Exception: current writer is disposed');\r\n        }\r\n        validateNullOrUndefined(value, 'string');\r\n        this.bufferText = this.bufferText + value + '\\r\\n';\r\n        if (this.bufferText.length >= 10240) {\r\n            this.flush();\r\n        }\r\n    };\r\n    /**\r\n     * Releases the resources used by the StreamWriter\r\n     * @returns {void}\r\n     */\r\n    StreamWriter.prototype.destroy = function () {\r\n        this.bufferBlob = undefined;\r\n        this.bufferText = undefined;\r\n        if (this.enc instanceof Encoding) {\r\n            this.enc.destroy();\r\n        }\r\n        this.enc = undefined;\r\n    };\r\n    return StreamWriter;\r\n}());\r\nexport { StreamWriter };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}