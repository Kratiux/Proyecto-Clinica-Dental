{"ast":null,"code":"import { ParserBase as parser } from './parser-base';\nimport { IntlBase as base } from './intl-base';\nimport { isUndefined, throwError, getValue, isBlazor } from '../util';\nimport { HijriParser } from '../hijri-parser';\nimport { isNullOrUndefined, extend } from '../util';\nvar abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nvar standalone = 'stand-alone';\nvar weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\nexport var basicPatterns = ['short', 'medium', 'long', 'full'];\nvar timeSetter = {\n  m: 'getMinutes',\n  h: 'getHours',\n  H: 'getHours',\n  s: 'getSeconds',\n  d: 'getDate',\n  f: 'getMilliseconds'\n};\nexport var datePartMatcher = {\n  'M': 'month',\n  'd': 'day',\n  'E': 'weekday',\n  'c': 'weekday',\n  'y': 'year',\n  'm': 'minute',\n  'h': 'hour',\n  'H': 'hour',\n  's': 'second',\n  'L': 'month',\n  'a': 'designator',\n  'z': 'timeZone',\n  'Z': 'timeZone',\n  'G': 'era',\n  'f': 'milliseconds'\n};\nvar timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n/**\r\n * Date Format is a framework provides support for date formatting.\r\n *\r\n * @private\r\n */\nvar DateFormat = /** @class */function () {\n  function DateFormat() {}\n  /**\r\n   * Returns the formatter function for given skeleton.\r\n   *\r\n   * @param {string} culture -  Specifies the culture name to be which formatting.\r\n   * @param {DateFormatOptions} option - Specific the format in which date  will format.\r\n   * @param {Object} cldr - Specifies the global cldr data collection.\r\n   * @returns {Function} ?\r\n   */\n  DateFormat.dateFormat = function (culture, option, cldr) {\n    var _this = this;\n    var dependable = base.getDependables(cldr, culture, option.calendar);\n    var numObject = getValue('parserObject.numbers', dependable);\n    var dateObject = dependable.dateObject;\n    var formatOptions = {\n      isIslamic: base.islamicRegex.test(option.calendar)\n    };\n    if (isBlazor() && option.isServerRendered) {\n      option = base.compareBlazorDateFormats(option, culture);\n    }\n    var resPattern = option.format || base.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n    formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : base.getDateSeparator(dependable.dateObject);\n    if (isUndefined(resPattern)) {\n      throwError('Format options or type given must be invalid');\n    } else {\n      resPattern = base.ConvertDateToWeekFormat(resPattern);\n      if (isBlazor()) {\n        resPattern = resPattern.replace(/tt/, 'a');\n      }\n      formatOptions.pattern = resPattern;\n      formatOptions.numMapper = isBlazor() ? extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\n      var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n      for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {\n        var str = patternMatch_1[_i];\n        var len = str.length;\n        var char = str[0];\n        if (char === 'K') {\n          char = 'h';\n        }\n        switch (char) {\n          case 'E':\n          case 'c':\n            if (isBlazor()) {\n              // eslint-disable-next-line\n              formatOptions.weekday = getValue('days.' + base.monthIndex[len], dateObject);\n            } else {\n              // eslint-disable-next-line\n              formatOptions.weekday = dependable.dateObject[base.days][standalone][base.monthIndex[len]];\n            }\n            break;\n          case 'M':\n          case 'L':\n            if (isBlazor()) {\n              // eslint-disable-next-line\n              formatOptions.month = getValue('months.' + base.monthIndex[len], dateObject);\n            } else {\n              // eslint-disable-next-line\n              formatOptions.month = dependable.dateObject[base.month][standalone][base.monthIndex[len]];\n            }\n            break;\n          case 'a':\n            formatOptions.designator = isBlazor() ? getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n            break;\n          case 'G':\n            // eslint-disable-next-line\n            var eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';\n            formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n            break;\n          case 'z':\n            formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n            break;\n        }\n      }\n    }\n    return function (value) {\n      if (isNaN(value.getDate())) {\n        return null;\n      }\n      return _this.intDateFormatter(value, formatOptions);\n    };\n  };\n  /**\r\n   * Returns formatted date string based on options passed.\r\n   *\r\n   * @param {Date} value ?\r\n   * @param {FormatOptions} options ?\r\n   * @returns {string} ?\r\n   */\n  DateFormat.intDateFormatter = function (value, options) {\n    var pattern = options.pattern;\n    var ret = '';\n    var matches = pattern.match(base.dateParseRegex);\n    var dObject = this.getCurrentDateValue(value, options.isIslamic);\n    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n      var match = matches_1[_i];\n      var length_1 = match.length;\n      var char = match[0];\n      if (char === 'K') {\n        char = 'h';\n      }\n      var curval = void 0;\n      var curvalstr = '';\n      var isNumber = void 0;\n      var processNumber = void 0;\n      var curstr = '';\n      switch (char) {\n        case 'M':\n        case 'L':\n          curval = dObject.month;\n          if (length_1 > 2) {\n            // eslint-disable-next-line\n            ret += options.month[curval];\n          } else {\n            isNumber = true;\n          }\n          break;\n        case 'E':\n        case 'c':\n          // eslint-disable-next-line\n          ret += options.weekday[weekdayKey[value.getDay()]];\n          break;\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'd':\n        case 'f':\n          isNumber = true;\n          if (char === 'd') {\n            curval = dObject.date;\n          } else if (char === 'f') {\n            isNumber = false;\n            processNumber = true;\n            // eslint-disable-next-line\n            curvalstr = value[timeSetter[char]]().toString();\n            curvalstr = curvalstr.substring(0, length_1);\n            var curlength = curvalstr.length;\n            if (length_1 !== curlength) {\n              if (length_1 > 3) {\n                continue;\n              }\n              for (var i = 0; i < length_1 - curlength; i++) {\n                curvalstr = '0' + curvalstr.toString();\n              }\n            }\n            curstr += curvalstr;\n          } else {\n            // eslint-disable-next-line\n            curval = value[timeSetter[char]]();\n          }\n          if (char === 'h') {\n            curval = curval % 12 || 12;\n          }\n          break;\n        case 'y':\n          processNumber = true;\n          curstr += dObject.year;\n          if (length_1 === 2) {\n            curstr = curstr.substr(curstr.length - 2);\n          }\n          break;\n        case 'a':\n          // eslint-disable-next-line\n          var desig = value.getHours() < 12 ? 'am' : 'pm';\n          // eslint-disable-next-line\n          ret += options.designator[desig];\n          break;\n        case 'G':\n          // eslint-disable-next-line\n          var dec = value.getFullYear() < 0 ? 0 : 1;\n          // eslint-disable-next-line\n          var retu = options.era[dec];\n          if (isNullOrUndefined(retu)) {\n            // eslint-disable-next-line\n            retu = options.era[dec ? 0 : 1];\n          }\n          ret += retu || '';\n          break;\n        case '\\'':\n          ret += match === '\\'\\'' ? '\\'' : match.replace(/'/g, '');\n          break;\n        case 'z':\n          // eslint-disable-next-line\n          var timezone = value.getTimezoneOffset();\n          // eslint-disable-next-line\n          var pattern_1 = length_1 < 4 ? '+H;-H' : options.timeZone.hourFormat;\n          pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);\n          if (timezone === 0) {\n            ret += options.timeZone.gmtZeroFormat;\n          } else {\n            processNumber = true;\n            curstr = this.getTimeZoneValue(timezone, pattern_1);\n          }\n          curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n          break;\n        case ':':\n          // eslint-disable-next-line\n          ret += options.numMapper.numberSymbols[timeSeparator];\n          break;\n        case '/':\n          ret += options.dateSeperator;\n          break;\n        case 'W':\n          isNumber = true;\n          curval = base.getWeekOfYear(value);\n          break;\n        default:\n          ret += match;\n      }\n      if (isNumber) {\n        processNumber = true;\n        curstr = this.checkTwodigitNumber(curval, length_1);\n      }\n      if (processNumber) {\n        ret += parser.convertValueParts(curstr, base.latnParseRegex, options.numMapper.mapper);\n      }\n    }\n    return ret;\n  };\n  DateFormat.getCurrentDateValue = function (value, isIslamic) {\n    if (isIslamic) {\n      return HijriParser.getHijriDate(value);\n    }\n    return {\n      year: value.getFullYear(),\n      month: value.getMonth() + 1,\n      date: value.getDate()\n    };\n  };\n  /**\r\n   * Returns two digit numbers for given value and length\r\n   *\r\n   * @param {number} val ?\r\n   * @param {number} len ?\r\n   * @returns {string} ?\r\n   */\n  DateFormat.checkTwodigitNumber = function (val, len) {\n    var ret = val + '';\n    if (len === 2 && ret.length !== 2) {\n      return '0' + ret;\n    }\n    return ret;\n  };\n  /**\r\n   * Returns the value of the Time Zone.\r\n   *\r\n   * @param {number} tVal ?\r\n   * @param {string} pattern ?\r\n   * @returns {string} ?\r\n   * @private\r\n   */\n  DateFormat.getTimeZoneValue = function (tVal, pattern) {\n    var _this = this;\n    var splt = pattern.split(';');\n    var curPattern = splt[tVal > 0 ? 1 : 0];\n    var no = Math.abs(tVal);\n    return curPattern = curPattern.replace(/HH?|mm/g, function (str) {\n      var len = str.length;\n      var ishour = str.indexOf('H') !== -1;\n      return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);\n    });\n  };\n  return DateFormat;\n}();\nexport { DateFormat };","map":{"version":3,"names":["ParserBase","parser","IntlBase","base","isUndefined","throwError","getValue","isBlazor","HijriParser","isNullOrUndefined","extend","abbreviateRegexGlobal","standalone","weekdayKey","basicPatterns","timeSetter","m","h","H","s","d","f","datePartMatcher","timeSeparator","DateFormat","dateFormat","culture","option","cldr","_this","dependable","getDependables","calendar","numObject","dateObject","formatOptions","isIslamic","islamicRegex","test","isServerRendered","compareBlazorDateFormats","resPattern","format","getResultantPattern","skeleton","type","dateSeperator","getDateSeparator","ConvertDateToWeekFormat","replace","pattern","numMapper","getNumberMapper","parserObject","getNumberingSystem","patternMatch","match","_i","patternMatch_1","length","str","len","char","weekday","monthIndex","days","month","designator","eText","era","timeZone","value","isNaN","getDate","intDateFormatter","options","ret","matches","dateParseRegex","dObject","getCurrentDateValue","matches_1","length_1","curval","curvalstr","isNumber","processNumber","curstr","getDay","date","toString","substring","curlength","i","year","substr","desig","getHours","dec","getFullYear","retu","timezone","getTimezoneOffset","pattern_1","hourFormat","gmtZeroFormat","getTimeZoneValue","gmtFormat","numberSymbols","getWeekOfYear","checkTwodigitNumber","convertValueParts","latnParseRegex","mapper","getHijriDate","getMonth","val","tVal","splt","split","curPattern","no","Math","abs","ishour","indexOf","floor"],"sources":["C:/Users/User/Desktop/ClinicaDentalVersionFinal/Proyecto-Clinica-Dental/donto-react/node_modules/@syncfusion/ej2-base/src/intl/date-formatter.js"],"sourcesContent":["import { ParserBase as parser } from './parser-base';\r\nimport { IntlBase as base } from './intl-base';\r\nimport { isUndefined, throwError, getValue, isBlazor } from '../util';\r\nimport { HijriParser } from '../hijri-parser';\r\nimport { isNullOrUndefined, extend } from '../util';\r\nvar abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\r\nvar standalone = 'stand-alone';\r\nvar weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\nexport var basicPatterns = ['short', 'medium', 'long', 'full'];\r\nvar timeSetter = {\r\n    m: 'getMinutes',\r\n    h: 'getHours',\r\n    H: 'getHours',\r\n    s: 'getSeconds',\r\n    d: 'getDate',\r\n    f: 'getMilliseconds'\r\n};\r\nexport var datePartMatcher = {\r\n    'M': 'month',\r\n    'd': 'day',\r\n    'E': 'weekday',\r\n    'c': 'weekday',\r\n    'y': 'year',\r\n    'm': 'minute',\r\n    'h': 'hour',\r\n    'H': 'hour',\r\n    's': 'second',\r\n    'L': 'month',\r\n    'a': 'designator',\r\n    'z': 'timeZone',\r\n    'Z': 'timeZone',\r\n    'G': 'era',\r\n    'f': 'milliseconds'\r\n};\r\nvar timeSeparator = 'timeSeparator';\r\n/* tslint:disable no-any */\r\n/**\r\n * Date Format is a framework provides support for date formatting.\r\n *\r\n * @private\r\n */\r\nvar DateFormat = /** @class */ (function () {\r\n    function DateFormat() {\r\n    }\r\n    /**\r\n     * Returns the formatter function for given skeleton.\r\n     *\r\n     * @param {string} culture -  Specifies the culture name to be which formatting.\r\n     * @param {DateFormatOptions} option - Specific the format in which date  will format.\r\n     * @param {Object} cldr - Specifies the global cldr data collection.\r\n     * @returns {Function} ?\r\n     */\r\n    DateFormat.dateFormat = function (culture, option, cldr) {\r\n        var _this = this;\r\n        var dependable = base.getDependables(cldr, culture, option.calendar);\r\n        var numObject = getValue('parserObject.numbers', dependable);\r\n        var dateObject = dependable.dateObject;\r\n        var formatOptions = { isIslamic: base.islamicRegex.test(option.calendar) };\r\n        if (isBlazor() && option.isServerRendered) {\r\n            option = base.compareBlazorDateFormats(option, culture);\r\n        }\r\n        var resPattern = option.format ||\r\n            base.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\r\n        formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : base.getDateSeparator(dependable.dateObject);\r\n        if (isUndefined(resPattern)) {\r\n            throwError('Format options or type given must be invalid');\r\n        }\r\n        else {\r\n            resPattern = base.ConvertDateToWeekFormat(resPattern);\r\n            if (isBlazor()) {\r\n                resPattern = resPattern.replace(/tt/, 'a');\r\n            }\r\n            formatOptions.pattern = resPattern;\r\n            formatOptions.numMapper = isBlazor() ?\r\n                extend({}, numObject) : parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\r\n            var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\r\n            for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {\r\n                var str = patternMatch_1[_i];\r\n                var len = str.length;\r\n                var char = str[0];\r\n                if (char === 'K') {\r\n                    char = 'h';\r\n                }\r\n                switch (char) {\r\n                    case 'E':\r\n                    case 'c':\r\n                        if (isBlazor()) {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.weekday = getValue('days.' + base.monthIndex[len], dateObject);\r\n                        }\r\n                        else {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.weekday = dependable.dateObject[base.days][standalone][base.monthIndex[len]];\r\n                        }\r\n                        break;\r\n                    case 'M':\r\n                    case 'L':\r\n                        if (isBlazor()) {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.month = getValue('months.' + base.monthIndex[len], dateObject);\r\n                        }\r\n                        else {\r\n                            // eslint-disable-next-line\r\n                            formatOptions.month = dependable.dateObject[base.month][standalone][base.monthIndex[len]];\r\n                        }\r\n                        break;\r\n                    case 'a':\r\n                        formatOptions.designator = isBlazor() ?\r\n                            getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\r\n                        break;\r\n                    case 'G':\r\n                        // eslint-disable-next-line\r\n                        var eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\r\n                        formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\r\n                        break;\r\n                    case 'z':\r\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return function (value) {\r\n            if (isNaN(value.getDate())) {\r\n                return null;\r\n            }\r\n            return _this.intDateFormatter(value, formatOptions);\r\n        };\r\n    };\r\n    /**\r\n     * Returns formatted date string based on options passed.\r\n     *\r\n     * @param {Date} value ?\r\n     * @param {FormatOptions} options ?\r\n     * @returns {string} ?\r\n     */\r\n    DateFormat.intDateFormatter = function (value, options) {\r\n        var pattern = options.pattern;\r\n        var ret = '';\r\n        var matches = pattern.match(base.dateParseRegex);\r\n        var dObject = this.getCurrentDateValue(value, options.isIslamic);\r\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\r\n            var match = matches_1[_i];\r\n            var length_1 = match.length;\r\n            var char = match[0];\r\n            if (char === 'K') {\r\n                char = 'h';\r\n            }\r\n            var curval = void 0;\r\n            var curvalstr = '';\r\n            var isNumber = void 0;\r\n            var processNumber = void 0;\r\n            var curstr = '';\r\n            switch (char) {\r\n                case 'M':\r\n                case 'L':\r\n                    curval = dObject.month;\r\n                    if (length_1 > 2) {\r\n                        // eslint-disable-next-line\r\n                        ret += options.month[curval];\r\n                    }\r\n                    else {\r\n                        isNumber = true;\r\n                    }\r\n                    break;\r\n                case 'E':\r\n                case 'c':\r\n                    // eslint-disable-next-line\r\n                    ret += options.weekday[weekdayKey[value.getDay()]];\r\n                    break;\r\n                case 'H':\r\n                case 'h':\r\n                case 'm':\r\n                case 's':\r\n                case 'd':\r\n                case 'f':\r\n                    isNumber = true;\r\n                    if (char === 'd') {\r\n                        curval = dObject.date;\r\n                    }\r\n                    else if (char === 'f') {\r\n                        isNumber = false;\r\n                        processNumber = true;\r\n                        // eslint-disable-next-line\r\n                        curvalstr = value[timeSetter[char]]().toString();\r\n                        curvalstr = curvalstr.substring(0, length_1);\r\n                        var curlength = curvalstr.length;\r\n                        if (length_1 !== curlength) {\r\n                            if (length_1 > 3) {\r\n                                continue;\r\n                            }\r\n                            for (var i = 0; i < length_1 - curlength; i++) {\r\n                                curvalstr = '0' + curvalstr.toString();\r\n                            }\r\n                        }\r\n                        curstr += curvalstr;\r\n                    }\r\n                    else {\r\n                        // eslint-disable-next-line\r\n                        curval = value[timeSetter[char]]();\r\n                    }\r\n                    if (char === 'h') {\r\n                        curval = curval % 12 || 12;\r\n                    }\r\n                    break;\r\n                case 'y':\r\n                    processNumber = true;\r\n                    curstr += dObject.year;\r\n                    if (length_1 === 2) {\r\n                        curstr = curstr.substr(curstr.length - 2);\r\n                    }\r\n                    break;\r\n                case 'a':\r\n                    // eslint-disable-next-line\r\n                    var desig = value.getHours() < 12 ? 'am' : 'pm';\r\n                    // eslint-disable-next-line\r\n                    ret += options.designator[desig];\r\n                    break;\r\n                case 'G':\r\n                    // eslint-disable-next-line\r\n                    var dec = value.getFullYear() < 0 ? 0 : 1;\r\n                    // eslint-disable-next-line\r\n                    var retu = options.era[dec];\r\n                    if (isNullOrUndefined(retu)) {\r\n                        // eslint-disable-next-line\r\n                        retu = options.era[dec ? 0 : 1];\r\n                    }\r\n                    ret += retu || '';\r\n                    break;\r\n                case '\\'':\r\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/'/g, '');\r\n                    break;\r\n                case 'z':\r\n                    // eslint-disable-next-line\r\n                    var timezone = value.getTimezoneOffset();\r\n                    // eslint-disable-next-line\r\n                    var pattern_1 = (length_1 < 4) ? '+H;-H' : options.timeZone.hourFormat;\r\n                    pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);\r\n                    if (timezone === 0) {\r\n                        ret += options.timeZone.gmtZeroFormat;\r\n                    }\r\n                    else {\r\n                        processNumber = true;\r\n                        curstr = this.getTimeZoneValue(timezone, pattern_1);\r\n                    }\r\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\r\n                    break;\r\n                case ':':\r\n                    // eslint-disable-next-line\r\n                    ret += options.numMapper.numberSymbols[timeSeparator];\r\n                    break;\r\n                case '/':\r\n                    ret += options.dateSeperator;\r\n                    break;\r\n                case 'W':\r\n                    isNumber = true;\r\n                    curval = base.getWeekOfYear(value);\r\n                    break;\r\n                default:\r\n                    ret += match;\r\n            }\r\n            if (isNumber) {\r\n                processNumber = true;\r\n                curstr = this.checkTwodigitNumber(curval, length_1);\r\n            }\r\n            if (processNumber) {\r\n                ret += parser.convertValueParts(curstr, base.latnParseRegex, options.numMapper.mapper);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    DateFormat.getCurrentDateValue = function (value, isIslamic) {\r\n        if (isIslamic) {\r\n            return HijriParser.getHijriDate(value);\r\n        }\r\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\r\n    };\r\n    /**\r\n     * Returns two digit numbers for given value and length\r\n     *\r\n     * @param {number} val ?\r\n     * @param {number} len ?\r\n     * @returns {string} ?\r\n     */\r\n    DateFormat.checkTwodigitNumber = function (val, len) {\r\n        var ret = val + '';\r\n        if (len === 2 && ret.length !== 2) {\r\n            return '0' + ret;\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns the value of the Time Zone.\r\n     *\r\n     * @param {number} tVal ?\r\n     * @param {string} pattern ?\r\n     * @returns {string} ?\r\n     * @private\r\n     */\r\n    DateFormat.getTimeZoneValue = function (tVal, pattern) {\r\n        var _this = this;\r\n        var splt = pattern.split(';');\r\n        var curPattern = splt[tVal > 0 ? 1 : 0];\r\n        var no = Math.abs(tVal);\r\n        return curPattern = curPattern.replace(/HH?|mm/g, function (str) {\r\n            var len = str.length;\r\n            var ishour = str.indexOf('H') !== -1;\r\n            return _this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\r\n        });\r\n    };\r\n    return DateFormat;\r\n}());\r\nexport { DateFormat };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}