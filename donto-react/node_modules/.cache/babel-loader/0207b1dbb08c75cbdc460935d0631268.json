{"ast":null,"code":"import { extend, isNullOrUndefined } from './util';\nimport { defaultCulture } from './internationalization';\n/**\r\n * L10n modules provides localized text for different culture.\r\n * ```typescript\r\n * import {setCulture} from '@syncfusion/ts-base-library';\r\n * //load global locale object common for all components.\r\n * L10n.load({\r\n *    'fr-BE': {\r\n *       'button': {\r\n *            'check': 'vérifié'\r\n *        }\r\n *    }\r\n * });\r\n * //set globale default locale culture.\r\n * setCulture('fr-BE');\r\n * let instance: L10n = new L10n('button', {\r\n *    check: 'checked'\r\n * });\r\n * //Get locale text for current property.\r\n * instance.getConstant('check');\r\n * //Change locale culture in a component.\r\n * instance.setLocale('en-US');\r\n * ```\r\n */\nvar L10n = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {string} controlName ?\r\n   * @param {Object} localeStrings ?\r\n   * @param {string} locale ?\r\n   */\n  function L10n(controlName, localeStrings, locale) {\n    this.controlName = controlName;\n    this.localeStrings = localeStrings;\n    this.setLocale(locale || defaultCulture);\n  }\n  /**\r\n   * Sets the locale text\r\n   *\r\n   * @param {string} locale ?\r\n   * @returns {void} ?\r\n   */\n  L10n.prototype.setLocale = function (locale) {\n    var intLocale = this.intGetControlConstant(L10n.locale, locale);\n    this.currentLocale = intLocale || this.localeStrings;\n  };\n  /**\r\n   * Sets the global locale for all components.\r\n   *\r\n   * @param {Object} localeObject - specifies the localeObject to be set as global locale.\r\n   * @returns {void} ?\r\n   */\n  L10n.load = function (localeObject) {\n    this.locale = extend(this.locale, localeObject, {}, true);\n  };\n  /**\r\n   * Returns current locale text for the property based on the culture name and control name.\r\n   *\r\n   * @param {string} prop - specifies the property for which localize text to be returned.\r\n   * @returns {string} ?\r\n   */\n  L10n.prototype.getConstant = function (prop) {\n    // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n    if (!isNullOrUndefined(this.currentLocale[\"\" + prop])) {\n      return this.currentLocale[\"\" + prop];\n    } else {\n      return this.localeStrings[\"\" + prop] || '';\n    }\n  };\n  /**\r\n   * Returns the control constant object for current object and the locale specified.\r\n   *\r\n   * @param {Object} curObject ?\r\n   * @param {string} locale ?\r\n   * @returns {Object} ?\r\n   */\n  L10n.prototype.intGetControlConstant = function (curObject, locale) {\n    if (curObject[\"\" + locale]) {\n      return curObject[\"\" + locale][this.controlName];\n    }\n    return null;\n  };\n  L10n.locale = {};\n  return L10n;\n}();\nexport { L10n };","map":{"version":3,"names":["extend","isNullOrUndefined","defaultCulture","L10n","controlName","localeStrings","locale","setLocale","prototype","intLocale","intGetControlConstant","currentLocale","load","localeObject","getConstant","prop","curObject"],"sources":["C:/Users/User/Desktop/ClinicaDentalVersionFinal/Proyecto-Clinica-Dental/donto-react/node_modules/@syncfusion/ej2-base/src/l10n.js"],"sourcesContent":["import { extend, isNullOrUndefined } from './util';\r\nimport { defaultCulture } from './internationalization';\r\n/**\r\n * L10n modules provides localized text for different culture.\r\n * ```typescript\r\n * import {setCulture} from '@syncfusion/ts-base-library';\r\n * //load global locale object common for all components.\r\n * L10n.load({\r\n *    'fr-BE': {\r\n *       'button': {\r\n *            'check': 'vérifié'\r\n *        }\r\n *    }\r\n * });\r\n * //set globale default locale culture.\r\n * setCulture('fr-BE');\r\n * let instance: L10n = new L10n('button', {\r\n *    check: 'checked'\r\n * });\r\n * //Get locale text for current property.\r\n * instance.getConstant('check');\r\n * //Change locale culture in a component.\r\n * instance.setLocale('en-US');\r\n * ```\r\n */\r\nvar L10n = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {string} controlName ?\r\n     * @param {Object} localeStrings ?\r\n     * @param {string} locale ?\r\n     */\r\n    function L10n(controlName, localeStrings, locale) {\r\n        this.controlName = controlName;\r\n        this.localeStrings = localeStrings;\r\n        this.setLocale(locale || defaultCulture);\r\n    }\r\n    /**\r\n     * Sets the locale text\r\n     *\r\n     * @param {string} locale ?\r\n     * @returns {void} ?\r\n     */\r\n    L10n.prototype.setLocale = function (locale) {\r\n        var intLocale = this.intGetControlConstant(L10n.locale, locale);\r\n        this.currentLocale = intLocale || this.localeStrings;\r\n    };\r\n    /**\r\n     * Sets the global locale for all components.\r\n     *\r\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\r\n     * @returns {void} ?\r\n     */\r\n    L10n.load = function (localeObject) {\r\n        this.locale = extend(this.locale, localeObject, {}, true);\r\n    };\r\n    /**\r\n     * Returns current locale text for the property based on the culture name and control name.\r\n     *\r\n     * @param {string} prop - specifies the property for which localize text to be returned.\r\n     * @returns {string} ?\r\n     */\r\n    L10n.prototype.getConstant = function (prop) {\r\n        // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\r\n        if (!isNullOrUndefined(this.currentLocale[\"\" + prop])) {\r\n            return this.currentLocale[\"\" + prop];\r\n        }\r\n        else {\r\n            return this.localeStrings[\"\" + prop] || '';\r\n        }\r\n    };\r\n    /**\r\n     * Returns the control constant object for current object and the locale specified.\r\n     *\r\n     * @param {Object} curObject ?\r\n     * @param {string} locale ?\r\n     * @returns {Object} ?\r\n     */\r\n    L10n.prototype.intGetControlConstant = function (curObject, locale) {\r\n        if ((curObject)[\"\" + locale]) {\r\n            return (curObject)[\"\" + locale][this.controlName];\r\n        }\r\n        return null;\r\n    };\r\n    L10n.locale = {};\r\n    return L10n;\r\n}());\r\nexport { L10n };\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,iBAAiB,QAAQ,QAAQ;AAClD,SAASC,cAAc,QAAQ,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,aAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAIA,CAACC,WAAW,EAAEC,aAAa,EAAEC,MAAM,EAAE;IAC9C,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACE,SAAS,CAACD,MAAM,IAAIJ,cAAc,CAAC;EAC5C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,IAAI,CAACK,SAAS,CAACD,SAAS,GAAG,UAAUD,MAAM,EAAE;IACzC,IAAIG,SAAS,GAAG,IAAI,CAACC,qBAAqB,CAACP,IAAI,CAACG,MAAM,EAAEA,MAAM,CAAC;IAC/D,IAAI,CAACK,aAAa,GAAGF,SAAS,IAAI,IAAI,CAACJ,aAAa;EACxD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIF,IAAI,CAACS,IAAI,GAAG,UAAUC,YAAY,EAAE;IAChC,IAAI,CAACP,MAAM,GAAGN,MAAM,CAAC,IAAI,CAACM,MAAM,EAAEO,YAAY,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;EAC7D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIV,IAAI,CAACK,SAAS,CAACM,WAAW,GAAG,UAAUC,IAAI,EAAE;IACzC;IACA,IAAI,CAACd,iBAAiB,CAAC,IAAI,CAACU,aAAa,CAAC,EAAE,GAAGI,IAAI,CAAC,CAAC,EAAE;MACnD,OAAO,IAAI,CAACJ,aAAa,CAAC,EAAE,GAAGI,IAAI,CAAC;IACxC,CAAC,MACI;MACD,OAAO,IAAI,CAACV,aAAa,CAAC,EAAE,GAAGU,IAAI,CAAC,IAAI,EAAE;IAC9C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIZ,IAAI,CAACK,SAAS,CAACE,qBAAqB,GAAG,UAAUM,SAAS,EAAEV,MAAM,EAAE;IAChE,IAAKU,SAAS,CAAE,EAAE,GAAGV,MAAM,CAAC,EAAE;MAC1B,OAAQU,SAAS,CAAE,EAAE,GAAGV,MAAM,CAAC,CAAC,IAAI,CAACF,WAAW,CAAC;IACrD;IACA,OAAO,IAAI;EACf,CAAC;EACDD,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;EAChB,OAAOH,IAAI;AACf,CAAC,CAAC,CAAE;AACJ,SAASA,IAAI"},"metadata":{},"sourceType":"module"}