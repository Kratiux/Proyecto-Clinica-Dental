{"ast":null,"code":"import { isNullOrUndefined as isNOU, isObject, merge } from './util';\n/**\r\n * The Fetch class provides a way to make asynchronous network requests, typically to retrieve resources from a server.\r\n * ```typescript\r\n *   var fetchApi = new Fetch('index.html', 'GET');\r\n *   fetchApi.send()\r\n *      .then((value) => {\r\n *          console.log(value);\r\n *      }).catch((error) => {\r\n *          console.log(error);\r\n *      });\r\n * ```\r\n */\nvar Fetch = /** @class */function () {\n  /**\r\n   * Constructor for Fetch class.\r\n   *\r\n   * @param {string|Object} options - Specifies the URL or Request object with URL to which the request is to be sent.\r\n   * @param {string} type - Specifies which request method is to be used, such as GET, POST, etc.\r\n   * @param {string} contentType - Specifies the content type of the request, which is used to indicate the original media type of the resource.\r\n   */\n  function Fetch(options, type, contentType) {\n    /**\r\n     * Specifies which request method is to be used, such as GET, POST, etc.\r\n     *\r\n     * @default GET\r\n     */\n    this.type = 'GET';\n    /**\r\n     * A boolean value indicating whether to reject the promise or not.\r\n     *\r\n     * @private\r\n     * @default true\r\n     */\n    this.emitError = true;\n    if (typeof options === 'string') {\n      this.url = options;\n      this.type = !isNOU(type) ? type.toUpperCase() : this.type;\n      this.contentType = contentType;\n    } else if (isObject(options) && Object.keys(options).length > 0) {\n      merge(this, options);\n    }\n    this.contentType = !isNOU(this.contentType) ? this.contentType : 'application/json; charset=utf-8';\n  }\n  /**\r\n   * Send the request to server.\r\n   *\r\n   * @param {string|Object} data - Specifies the data that needs to be added to the request.\r\n   * @returns {Promise<Response>} - Returns the response to a request.\r\n   */\n  Fetch.prototype.send = function (data) {\n    var _this = this;\n    var contentTypes = {\n      'application/json': 'json',\n      'multipart/form-data': 'formData',\n      'application/octet-stream': 'blob',\n      'application/x-www-form-urlencoded': 'formData'\n    };\n    try {\n      if (isNOU(this.fetchRequest) && this.type === 'GET') {\n        this.fetchRequest = new Request(this.url, {\n          method: this.type\n        });\n      } else if (isNOU(this.fetchRequest)) {\n        this.data = !isNOU(data) ? data : this.data;\n        this.fetchRequest = new Request(this.url, {\n          method: this.type,\n          headers: {\n            'Content-Type': this.contentType\n          },\n          body: this.data\n        });\n      }\n      var eventArgs = {\n        cancel: false,\n        fetchRequest: this.fetchRequest\n      };\n      this.triggerEvent(this['beforeSend'], eventArgs);\n      if (eventArgs.cancel) {\n        return null;\n      }\n      this.fetchResponse = fetch(this.fetchRequest);\n      return this.fetchResponse.then(function (response) {\n        _this.triggerEvent(_this['onLoad'], response);\n        if (!response.ok) {\n          throw response;\n        }\n        var responseType = 'text';\n        for (var _i = 0, _a = Object.keys(contentTypes); _i < _a.length; _i++) {\n          var key = _a[_i];\n          if (response.headers.get('Content-Type').indexOf(key) !== -1) {\n            responseType = contentTypes[key];\n          }\n        }\n        return response[responseType]();\n        // eslint-disable-next-line\n      }).then(function (data) {\n        _this.triggerEvent(_this['onSuccess'], data, _this);\n        return data;\n        // eslint-disable-next-line\n      }).catch(function (error) {\n        var returnVal = {};\n        if (_this.emitError) {\n          _this.triggerEvent(_this['onFailure'], error);\n          returnVal = Promise.reject(error);\n        }\n        return returnVal;\n      });\n    } catch (error) {\n      return error;\n    }\n  };\n  Fetch.prototype.triggerEvent = function (callback, data, instance) {\n    if (!isNOU(callback) && typeof callback === 'function') {\n      callback(data, instance);\n    }\n  };\n  return Fetch;\n}();\nexport { Fetch };","map":{"version":3,"names":["isNullOrUndefined","isNOU","isObject","merge","Fetch","options","type","contentType","emitError","url","toUpperCase","Object","keys","length","prototype","send","data","_this","contentTypes","fetchRequest","Request","method","headers","body","eventArgs","cancel","triggerEvent","fetchResponse","fetch","then","response","ok","responseType","_i","_a","key","get","indexOf","catch","error","returnVal","Promise","reject","callback","instance"],"sources":["C:/Users/User/Desktop/ClinicaDentalVersionFinal/Proyecto-Clinica-Dental/donto-react/node_modules/@syncfusion/ej2-base/src/fetch.js"],"sourcesContent":["import { isNullOrUndefined as isNOU, isObject, merge } from './util';\r\n/**\r\n * The Fetch class provides a way to make asynchronous network requests, typically to retrieve resources from a server.\r\n * ```typescript\r\n *   var fetchApi = new Fetch('index.html', 'GET');\r\n *   fetchApi.send()\r\n *      .then((value) => {\r\n *          console.log(value);\r\n *      }).catch((error) => {\r\n *          console.log(error);\r\n *      });\r\n * ```\r\n */\r\nvar Fetch = /** @class */ (function () {\r\n    /**\r\n     * Constructor for Fetch class.\r\n     *\r\n     * @param {string|Object} options - Specifies the URL or Request object with URL to which the request is to be sent.\r\n     * @param {string} type - Specifies which request method is to be used, such as GET, POST, etc.\r\n     * @param {string} contentType - Specifies the content type of the request, which is used to indicate the original media type of the resource.\r\n     */\r\n    function Fetch(options, type, contentType) {\r\n        /**\r\n         * Specifies which request method is to be used, such as GET, POST, etc.\r\n         *\r\n         * @default GET\r\n         */\r\n        this.type = 'GET';\r\n        /**\r\n         * A boolean value indicating whether to reject the promise or not.\r\n         *\r\n         * @private\r\n         * @default true\r\n         */\r\n        this.emitError = true;\r\n        if (typeof options === 'string') {\r\n            this.url = options;\r\n            this.type = !isNOU(type) ? type.toUpperCase() : this.type;\r\n            this.contentType = contentType;\r\n        }\r\n        else if (isObject(options) && Object.keys(options).length > 0) {\r\n            merge(this, options);\r\n        }\r\n        this.contentType = !isNOU(this.contentType) ? this.contentType : 'application/json; charset=utf-8';\r\n    }\r\n    /**\r\n     * Send the request to server.\r\n     *\r\n     * @param {string|Object} data - Specifies the data that needs to be added to the request.\r\n     * @returns {Promise<Response>} - Returns the response to a request.\r\n     */\r\n    Fetch.prototype.send = function (data) {\r\n        var _this = this;\r\n        var contentTypes = {\r\n            'application/json': 'json',\r\n            'multipart/form-data': 'formData',\r\n            'application/octet-stream': 'blob',\r\n            'application/x-www-form-urlencoded': 'formData'\r\n        };\r\n        try {\r\n            if (isNOU(this.fetchRequest) && this.type === 'GET') {\r\n                this.fetchRequest = new Request(this.url, { method: this.type });\r\n            }\r\n            else if (isNOU(this.fetchRequest)) {\r\n                this.data = !isNOU(data) ? data : this.data;\r\n                this.fetchRequest = new Request(this.url, {\r\n                    method: this.type,\r\n                    headers: { 'Content-Type': this.contentType },\r\n                    body: this.data\r\n                });\r\n            }\r\n            var eventArgs = { cancel: false, fetchRequest: this.fetchRequest };\r\n            this.triggerEvent(this['beforeSend'], eventArgs);\r\n            if (eventArgs.cancel) {\r\n                return null;\r\n            }\r\n            this.fetchResponse = fetch(this.fetchRequest);\r\n            return this.fetchResponse.then(function (response) {\r\n                _this.triggerEvent(_this['onLoad'], response);\r\n                if (!response.ok) {\r\n                    throw response;\r\n                }\r\n                var responseType = 'text';\r\n                for (var _i = 0, _a = Object.keys(contentTypes); _i < _a.length; _i++) {\r\n                    var key = _a[_i];\r\n                    if (response.headers.get('Content-Type').indexOf(key) !== -1) {\r\n                        responseType = contentTypes[key];\r\n                    }\r\n                }\r\n                return response[responseType]();\r\n                // eslint-disable-next-line\r\n            }).then(function (data) {\r\n                _this.triggerEvent(_this['onSuccess'], data, _this);\r\n                return data;\r\n                // eslint-disable-next-line\r\n            }).catch(function (error) {\r\n                var returnVal = {};\r\n                if (_this.emitError) {\r\n                    _this.triggerEvent(_this['onFailure'], error);\r\n                    returnVal = Promise.reject(error);\r\n                }\r\n                return returnVal;\r\n            });\r\n        }\r\n        catch (error) {\r\n            return error;\r\n        }\r\n    };\r\n    Fetch.prototype.triggerEvent = function (callback, data, instance) {\r\n        if (!isNOU(callback) && typeof callback === 'function') {\r\n            callback(data, instance);\r\n        }\r\n    };\r\n    return Fetch;\r\n}());\r\nexport { Fetch };\r\n"],"mappings":"AAAA,SAASA,iBAAiB,IAAIC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,QAAQ;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAG,aAAe,YAAY;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,KAAKA,CAACC,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAE;IACvC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACD,IAAI,GAAG,KAAK;IACjB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,SAAS,GAAG,IAAI;IACrB,IAAI,OAAOH,OAAO,KAAK,QAAQ,EAAE;MAC7B,IAAI,CAACI,GAAG,GAAGJ,OAAO;MAClB,IAAI,CAACC,IAAI,GAAG,CAACL,KAAK,CAACK,IAAI,CAAC,GAAGA,IAAI,CAACI,WAAW,CAAC,CAAC,GAAG,IAAI,CAACJ,IAAI;MACzD,IAAI,CAACC,WAAW,GAAGA,WAAW;IAClC,CAAC,MACI,IAAIL,QAAQ,CAACG,OAAO,CAAC,IAAIM,MAAM,CAACC,IAAI,CAACP,OAAO,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC3DV,KAAK,CAAC,IAAI,EAAEE,OAAO,CAAC;IACxB;IACA,IAAI,CAACE,WAAW,GAAG,CAACN,KAAK,CAAC,IAAI,CAACM,WAAW,CAAC,GAAG,IAAI,CAACA,WAAW,GAAG,iCAAiC;EACtG;EACA;AACJ;AACA;AACA;AACA;AACA;EACIH,KAAK,CAACU,SAAS,CAACC,IAAI,GAAG,UAAUC,IAAI,EAAE;IACnC,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,YAAY,GAAG;MACf,kBAAkB,EAAE,MAAM;MAC1B,qBAAqB,EAAE,UAAU;MACjC,0BAA0B,EAAE,MAAM;MAClC,mCAAmC,EAAE;IACzC,CAAC;IACD,IAAI;MACA,IAAIjB,KAAK,CAAC,IAAI,CAACkB,YAAY,CAAC,IAAI,IAAI,CAACb,IAAI,KAAK,KAAK,EAAE;QACjD,IAAI,CAACa,YAAY,GAAG,IAAIC,OAAO,CAAC,IAAI,CAACX,GAAG,EAAE;UAAEY,MAAM,EAAE,IAAI,CAACf;QAAK,CAAC,CAAC;MACpE,CAAC,MACI,IAAIL,KAAK,CAAC,IAAI,CAACkB,YAAY,CAAC,EAAE;QAC/B,IAAI,CAACH,IAAI,GAAG,CAACf,KAAK,CAACe,IAAI,CAAC,GAAGA,IAAI,GAAG,IAAI,CAACA,IAAI;QAC3C,IAAI,CAACG,YAAY,GAAG,IAAIC,OAAO,CAAC,IAAI,CAACX,GAAG,EAAE;UACtCY,MAAM,EAAE,IAAI,CAACf,IAAI;UACjBgB,OAAO,EAAE;YAAE,cAAc,EAAE,IAAI,CAACf;UAAY,CAAC;UAC7CgB,IAAI,EAAE,IAAI,CAACP;QACf,CAAC,CAAC;MACN;MACA,IAAIQ,SAAS,GAAG;QAAEC,MAAM,EAAE,KAAK;QAAEN,YAAY,EAAE,IAAI,CAACA;MAAa,CAAC;MAClE,IAAI,CAACO,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,EAAEF,SAAS,CAAC;MAChD,IAAIA,SAAS,CAACC,MAAM,EAAE;QAClB,OAAO,IAAI;MACf;MACA,IAAI,CAACE,aAAa,GAAGC,KAAK,CAAC,IAAI,CAACT,YAAY,CAAC;MAC7C,OAAO,IAAI,CAACQ,aAAa,CAACE,IAAI,CAAC,UAAUC,QAAQ,EAAE;QAC/Cb,KAAK,CAACS,YAAY,CAACT,KAAK,CAAC,QAAQ,CAAC,EAAEa,QAAQ,CAAC;QAC7C,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UACd,MAAMD,QAAQ;QAClB;QACA,IAAIE,YAAY,GAAG,MAAM;QACzB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGvB,MAAM,CAACC,IAAI,CAACM,YAAY,CAAC,EAAEe,EAAE,GAAGC,EAAE,CAACrB,MAAM,EAAEoB,EAAE,EAAE,EAAE;UACnE,IAAIE,GAAG,GAAGD,EAAE,CAACD,EAAE,CAAC;UAChB,IAAIH,QAAQ,CAACR,OAAO,CAACc,GAAG,CAAC,cAAc,CAAC,CAACC,OAAO,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1DH,YAAY,GAAGd,YAAY,CAACiB,GAAG,CAAC;UACpC;QACJ;QACA,OAAOL,QAAQ,CAACE,YAAY,CAAC,CAAC,CAAC;QAC/B;MACJ,CAAC,CAAC,CAACH,IAAI,CAAC,UAAUb,IAAI,EAAE;QACpBC,KAAK,CAACS,YAAY,CAACT,KAAK,CAAC,WAAW,CAAC,EAAED,IAAI,EAAEC,KAAK,CAAC;QACnD,OAAOD,IAAI;QACX;MACJ,CAAC,CAAC,CAACsB,KAAK,CAAC,UAAUC,KAAK,EAAE;QACtB,IAAIC,SAAS,GAAG,CAAC,CAAC;QAClB,IAAIvB,KAAK,CAACT,SAAS,EAAE;UACjBS,KAAK,CAACS,YAAY,CAACT,KAAK,CAAC,WAAW,CAAC,EAAEsB,KAAK,CAAC;UAC7CC,SAAS,GAAGC,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;QACrC;QACA,OAAOC,SAAS;MACpB,CAAC,CAAC;IACN,CAAC,CACD,OAAOD,KAAK,EAAE;MACV,OAAOA,KAAK;IAChB;EACJ,CAAC;EACDnC,KAAK,CAACU,SAAS,CAACY,YAAY,GAAG,UAAUiB,QAAQ,EAAE3B,IAAI,EAAE4B,QAAQ,EAAE;IAC/D,IAAI,CAAC3C,KAAK,CAAC0C,QAAQ,CAAC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MACpDA,QAAQ,CAAC3B,IAAI,EAAE4B,QAAQ,CAAC;IAC5B;EACJ,CAAC;EACD,OAAOxC,KAAK;AAChB,CAAC,CAAC,CAAE;AACJ,SAASA,KAAK"},"metadata":{},"sourceType":"module"}